generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  firstName       String?
  lastName        String?
  phone           String?
  passwordHash    String
  
  // 2FA Fields - TOTP (Authenticator Apps)
  twoFactorEnabled    Boolean  @default(false)
  twoFactorSecret     String?  // TOTP secret for authenticator apps
  backupCodes         String[] // Array of hashed backup recovery codes
  
  // OTP Fields - Email-based OTP
  otpCode         String?   @db.VarChar(6)   // Store the 6-digit OTP
  otpExpiresAt    DateTime?                  // When the OTP expires
  
  // Additional User Fields
  lastLogin       DateTime?
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Banking Relations
  jointOwners     JointOwner[]
  
  // Settings Relations
  profile               Profile?
  securitySettings      SecuritySettings?
  notificationSettings  NotificationSettings?
  preferences           Preferences?
  sessions              Session[]
  securityLogs          SecurityLog[]
}

// BANKING MODELS

model JointAccount {
  id            String        @id @default(uuid())
  accountNumber String        @unique @default(uuid()) // Will generate account number
  name          String
  accountType   AccountType   @default(CHECKING)
  currency      String        @default("EUR")
  balance       Float         @default(0.0)
  status        AccountStatus @default(ACTIVE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  owners        JointOwner[]
  transactions  Transaction[]
}

model JointOwner {
  id             String        @id @default(uuid())
  jointAccount   JointAccount  @relation(fields: [jointAccountId], references: [id], onDelete: Cascade)
  jointAccountId String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  role           OwnerRole     @default(SECONDARY)
  permissions    Permission[]  @default([VIEW, TRANSFER])
  joinedAt       DateTime      @default(now())
  
  @@unique([jointAccountId, userId])
}

model Transaction {
  id              String            @id @default(uuid())
  account         JointAccount      @relation(fields: [accountId], references: [id])
  accountId       String
  amount          Float
  type            TransactionType
  status          TransactionStatus @default(COMPLETED)
  description     String
  reference       String?
  fromAccount     String?           // For transfers
  toAccount       String?           // For transfers
  processedBy     String?           // User ID who initiated
  createdAt       DateTime          @default(now())
  processedAt     DateTime?
}

// SETTINGS MODELS

model Profile {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Personal Information
  dateOfBirth   DateTime?
  profilePicture String?
  
  // Address Information
  street        String?
  city          String?
  postalCode    String?
  country       String   @default("Germany")
  
  // Additional Profile Data
  accountType   String   @default("Standard") // Standard, Premium
  
  // Metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("profiles")
}

model SecuritySettings {
  id                  String   @id @default(uuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Authentication Settings (twoFactorEnabled already exists in User)
  biometricEnabled    Boolean  @default(false)
  
  // Notification Settings
  emailNotifications  Boolean  @default(true)
  smsNotifications    Boolean  @default(false)
  loginNotifications  Boolean  @default(true)
  
  // Session Settings
  sessionTimeout      Int      @default(30) // minutes
  
  // Metadata
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("security_settings")
}

model NotificationSettings {
  id              String                    @id @default(uuid())
  userId          String                    @unique
  user            User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Notification Types
  transactions    Boolean                   @default(true)
  marketUpdates   Boolean                   @default(true)
  accountAlerts   Boolean                   @default(true)
  promotions      Boolean                   @default(false)
  security        Boolean                   @default(true)
  statements      Boolean                   @default(true)
  
  // Frequency
  frequency       NotificationFrequency     @default(IMMEDIATE)
  
  // Channels
  emailChannel    Boolean                   @default(true)
  smsChannel      Boolean                   @default(false)
  pushChannel     Boolean                   @default(true)
  
  // Metadata
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt

  @@map("notification_settings")
}

model Preferences {
  id                String      @id @default(uuid())
  userId            String      @unique
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Language & Region
  language          String      @default("en-US")
  currency          String      @default("EUR")
  timezone          String      @default("Europe/Berlin")
  
  // Display Settings
  theme             Theme       @default(LIGHT)
  dateFormat        String      @default("DD/MM/YYYY")
  numberFormat      String      @default("European")
  dashboardLayout   DashboardLayout @default(STANDARD)
  
  // Metadata
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("preferences")
}

model Session {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Session Information
  sessionToken String  @unique
  deviceName   String?
  deviceType   String? // Mobile, Desktop, Web
  location     String?
  ipAddress    String?
  userAgent    String?
  
  // Timestamps
  createdAt    DateTime @default(now())
  lastActive   DateTime @default(now())
  expiresAt    DateTime

  @@map("sessions")
}

model SecurityLog {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Log Information
  action     String   // PASSWORD_CHANGE, LOGIN_ATTEMPT, SETTINGS_CHANGE, etc.
  details    String?  // Additional details in JSON format
  ipAddress  String?
  userAgent  String?
  success    Boolean  @default(true)
  
  // Metadata
  createdAt  DateTime @default(now())

  @@map("security_logs")
}

// BANKING ENUMS

enum AccountType {
  CHECKING
  SAVINGS
  BUSINESS
  INVESTMENT
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  FROZEN
  CLOSED
}

enum OwnerRole {
  PRIMARY
  SECONDARY
  AUTHORIZED_USER
}

enum Permission {
  VIEW
  TRANSFER
  FULL_ACCESS
  APPROVE_REQUIRED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER_IN
  TRANSFER_OUT
  PAYMENT
  FEE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

// SETTINGS ENUMS

enum NotificationFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
}

enum Theme {
  LIGHT
  DARK
  AUTO
}

enum DashboardLayout {
  COMPACT
  STANDARD
  DETAILED
}
